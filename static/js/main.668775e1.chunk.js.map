{"version":3,"sources":["constants/index.ts","helpers/localstorage.ts","helpers/adapter.ts","features/imagesSlice.ts","helpers/imagesAttributes.ts","hooks/index.ts","components/Card/index.tsx","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["PositionDegree","LoadingState","IMAGES_LOCAL_STORAGE_KEY","saveLocalStorageImages","images","serializedImages","reduce","obj","item","id","rotationAngle","serializeImagesForLocalStorage","localStorage","setItem","JSON","stringify","initialState","loading","Loading","NAME_SLICE","fetchImages","createAsyncThunk","a","fetch","response","json","imagesSlice","createSlice","name","reducers","changeRotation","state","action","map","image","payload","currentRotationAngle","Angle","extraReducers","builder","addCase","pending","fulfilled","imagesLocalStorageState","imagesFromLocalStorage","getItem","parse","getLocalStorageImagesState","url","download_url","hasStar","Math","random","Init","Success","rejected","Failed","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","Card","React","memo","dispatch","className","starClass","getCardClasses","style","transform","src","alt","onClick","App","useEffect","skeletonStyles","borderRadius","Array","from","length","_","idx","height","width","renderCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","imagesReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.668775e1.chunk.js","sourcesContent":["export const IMAGE_URL = 'https://picsum.photos/v2/list';\nexport const IMAGES_LOCAL_STORAGE_KEY = 'imagesRotationState';\n\nexport enum PositionDegree {\n  Angle = 90,\n  Init = 0,\n}\n\nexport enum LoadingState {\n  Loading = 'LOADING',\n  Success = 'SUCCESS',\n  Failed = 'FAILED',\n}\n","import { ImageLocalStorageStageType, ImageType } from '../types';\nimport { IMAGES_LOCAL_STORAGE_KEY } from '../constants';\nimport { serializeImagesForLocalStorage } from './adapter';\n\nexport const saveLocalStorageImages = (images: ImageType[]) => {\n  const serializedImages = serializeImagesForLocalStorage(images);\n\n  localStorage.setItem(\n    IMAGES_LOCAL_STORAGE_KEY,\n    JSON.stringify(serializedImages)\n  );\n};\n\nexport const getLocalStorageImagesState = (): ImageLocalStorageStageType => {\n  const imagesFromLocalStorage = localStorage.getItem(IMAGES_LOCAL_STORAGE_KEY);\n\n  if (imagesFromLocalStorage === null) {\n    return {};\n  }\n\n  return JSON.parse(imagesFromLocalStorage);\n};\n","import { ImageType } from '../types';\n\nexport const serializeImagesForLocalStorage = (images: ImageType[]) => {\n  return images.reduce((obj, item) => {\n    return {\n      ...obj,\n      [item.id]: item.rotationAngle,\n    };\n  }, {});\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IMAGE_URL, LoadingState, PositionDegree } from '../constants';\nimport { ImageBackendType, ImageType } from '../types';\nimport {\n  getLocalStorageImagesState,\n  saveLocalStorageImages,\n} from '../helpers/localstorage';\nimport { calcRotationAngle, initStatusStar } from '../helpers/imagesAttributes';\n\ntype ImagesState = {\n  images: ImageType[];\n  loading: LoadingState;\n};\n\nconst initialState: ImagesState = {\n  images: [],\n  loading: LoadingState.Loading,\n};\n\nconst NAME_SLICE = 'images';\n\nexport const fetchImages = createAsyncThunk(\n  `${NAME_SLICE}/fetchImages`,\n  async () => {\n    const response = await fetch(IMAGE_URL);\n    return await response.json();\n  }\n);\n\nexport const imagesSlice = createSlice({\n  name: NAME_SLICE,\n  initialState,\n  reducers: {\n    changeRotation: (state, action: PayloadAction<ImageType>) => {\n      state.images = state.images.map((image): ImageType => {\n        if (image.id !== action.payload.id) {\n          return image;\n        }\n\n        return {\n          ...image,\n          rotationAngle: calcRotationAngle(action.payload.rotationAngle),\n        };\n      });\n\n      saveLocalStorageImages(state.images);\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchImages.pending, (state) => {\n      state.loading = LoadingState.Loading;\n    });\n\n    builder.addCase(\n      fetchImages.fulfilled,\n      (state, action: PayloadAction<ImageBackendType[]>) => {\n        const imagesLocalStorageState = getLocalStorageImagesState();\n\n        state.images = action.payload.map(\n          (image): ImageType => ({\n            id: image.id,\n            url: image.download_url,\n            hasStar: initStatusStar(),\n            rotationAngle:\n              imagesLocalStorageState[image.id] || PositionDegree.Init,\n          })\n        );\n        state.loading = LoadingState.Success;\n      }\n    );\n\n    builder.addCase(fetchImages.rejected, (state, action) => {\n      state.loading = LoadingState.Failed;\n    });\n  },\n});\n\nexport const { changeRotation } = imagesSlice.actions;\nexport default imagesSlice.reducer;\n","import { PositionDegree } from '../constants';\n\nexport const initStatusStar = () => {\n  return Math.random() * 1 >= 0.5 ? true : false;\n};\n\nexport const calcRotationAngle = (currentRotationAngle: number) => {\n  return currentRotationAngle + PositionDegree.Angle;\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { CSSProperties } from 'react';\n\nimport { changeRotation } from '../../features/imagesSlice';\nimport { useAppDispatch } from '../../hooks';\nimport { ImageType } from '../../types';\n\ntype CardProps = {\n  image: ImageType;\n};\n\nconst Card = React.memo(({ image }: CardProps) => {\n  const dispatch = useAppDispatch();\n\n  const rotateImageHandler = () => {\n    dispatch(changeRotation(image));\n  };\n\n  const getCardClasses = () => {\n    const starClass = image.hasStar ? 'card--has-star' : '';\n    return `card ${starClass}`;\n  };\n\n  const getImageStyles = (): CSSProperties => {\n    return {\n      transform: `rotate(${image.rotationAngle}deg)`,\n    };\n  };\n\n  return (\n    <div className={getCardClasses()}>\n      <div className=\"img__container\">\n        <img\n          className=\"card__img\"\n          style={getImageStyles()}\n          src={image.url}\n          alt=\"Card\"\n        />\n      </div>\n      <div className=\"card__content\">\n        <div className=\"card__info\">\n          <span className=\"card__header\">Picture</span>\n          <span className=\"card__description\">Description</span>\n        </div>\n        <button onClick={rotateImageHandler} className=\"card__rotate-btn\">\n          <span className=\"visually-hidden\">Rotate 90 deg</span>\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default Card;\n","import React, { useEffect } from 'react';\nimport { Card } from './components';\nimport { fetchImages } from './features/imagesSlice';\nimport Skeleton from 'react-loading-skeleton';\nimport { LoadingState } from './constants';\nimport { useAppDispatch, useAppSelector } from './hooks';\n\nfunction App() {\n  const { images, loading } = useAppSelector((state) => state.images);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchImages());\n  }, [dispatch]);\n\n  const renderCards = () => {\n    switch (loading) {\n      case LoadingState.Loading:\n        const skeletonStyles = { borderRadius: '24px 0 24px 24px' };\n\n        return Array.from({ length: 6 }).map((_, idx) => (\n          <Skeleton style={skeletonStyles} key={idx} height={252} width={240} />\n        ));\n\n      case LoadingState.Failed:\n        return <div>The cards could not be loaded</div>;\n\n      case LoadingState.Success:\n        if (!images.length) {\n          return <div>There are no cards</div>;\n        }\n\n        return images.map((image) => {\n          return <Card key={image.id} image={image} />;\n        });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"cards\">{renderCards()}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport imagesReducer from '../features/imagesSlice';\n\nexport const store = configureStore({\n  reducer: { images: imagesReducer },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}